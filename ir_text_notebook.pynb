{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tokenizer import Tokenizer\n",
    "import json\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "import numpy as np\n",
    "from os import listdir\n",
    "import bow\n",
    "import operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('data\\\\datasets\\\\cacm_dataset.json') as json_file:\n",
    "    data = json.load(json_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3204\n"
     ]
    }
   ],
   "source": [
    "bags_of_words = []               \n",
    "for document in data['dataset'] :\n",
    "    bags_of_words.append(bow.bow(document['text']))\n",
    "print(len(bags_of_words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['binari' 'command' 'comput' 'decim' 'extract' 'function' 'oper' 'truth']\n"
     ]
    }
   ],
   "source": [
    "print(bags_of_words[22][0])\n",
    "bag22_of_words = bags_of_words[22]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def modele_ensembliste(sac_de_mot):\n",
    "    descr_ensembliste = set()\n",
    "    for mot in sac_de_mot[0]:\n",
    "        descr_ensembliste.add(mot)\n",
    "    return descr_ensembliste"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'binari', 'truth', 'oper', 'decim', 'extract', 'comput', 'function', 'command'}\n",
      "<class 'set'>\n"
     ]
    }
   ],
   "source": [
    "#test \n",
    "doc = modele_ensembliste(bag22_of_words)\n",
    "\n",
    "print(doc)\n",
    "print(type(doc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#input : Q requête texte (ex : \"hello la mifa\") sac de mot\n",
    "#D un doc en set\n",
    "def mesure_coeff_dice(Q,d):\n",
    "    \n",
    "    #Q doit être mit en modèle ensembliste :\n",
    "    #1)modèle ensembliste\n",
    "    q_ME = modele_ensembliste(Q)\n",
    "    print(type(q_ME))\n",
    "    print(type(d))\n",
    "    #d doit être traduit en descripteur : on le traduit en modèle ensembliste \n",
    "    # coef_dice = 2 * DnQ/(D+Q)\n",
    "    coef_dice = 2* len(d.intersection(q_ME))/(len(d)+len(q_ME))\n",
    "    return coef_dice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "64\n"
     ]
    }
   ],
   "source": [
    "with open('data\\\\datasets\\\\cacm_queries.json') as json_file:\n",
    "    data_queries = json.load(json_file)\n",
    "bags_of_words_queries = []               \n",
    "for document in data_queries['queries'] :\n",
    "    bags_of_words_queries.append(bow.bow(document['text']))\n",
    "print(len(bags_of_words_queries))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'set'>\n",
      "<class 'set'>\n",
      "<class 'set'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(type(doc))\n",
    "\n",
    "Q = bags_of_words_queries[0]\n",
    "mesure_coeff_dice(Q[0],doc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pour toutes les Queries, distance à un corpus?? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def linear_index(D):\n",
    "    index= []\n",
    "    for article in D:\n",
    "        #1)sac de mots\n",
    "        \n",
    "        sac_de_mots = bow.bow(article[\"text\"])\n",
    "        index.append((article[\"id\"],sac_de_mots))\n",
    "    return index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Test linear_index :\n",
    "D = data \n",
    "linear_index =linear_index(data[\"dataset\"])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### recherche de mot par pertinence (modèle ensembliste) à voir\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def take_second(elem):\n",
    "    return elem[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#input : Q requête texte (ex : \"hello la mifa\")\n",
    "#D data\n",
    "def recherche_ensembliste(Q,linear_index):\n",
    "    result = []\n",
    "    distance=[]   \n",
    "    bow= []\n",
    "    for (id,sac_de_mot) in  linear_index:\n",
    "        articleME = modele_ensembliste(bow(article[\"text\"]))\n",
    "        print(type(articleME))\n",
    "        distance.append((article[\"id\"],mesure_coeff_dice(Q,articleME)))\n",
    "    print(distance)\n",
    "    result = sorted(distance, key = take_second)#distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Q' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-c98936d40926>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Test\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mqueries\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mQ\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mD\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m#recherche_ensembliste(queries,D)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m#baw = term, freq\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Q' is not defined"
     ]
    }
   ],
   "source": [
    "# Test \n",
    "queries = Q[0]\n",
    "D = data\n",
    "#recherche_ensembliste(queries,D)\n",
    "#baw = term, freq\n",
    "result = []\n",
    "distance=[]   \n",
    "bow= []\n",
    "for article in D[\"dataset\"]:\n",
    "    print(type(article))\n",
    "    print(type(article[\"text\"]))\n",
    "    print(type(bow(article[\"text\"])))\n",
    "    articleME = modele_ensembliste(bow(article[\"text\"]))\n",
    "    print(type(articleME))\n",
    "    distance.append((article[\"id\"],mesure_coeff_dice(Q,articleME)))\n",
    "print(distance)\n",
    "result = sorted(distance, key = take_second)#distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "myList = [(1,2,67),(1,2,5),(1,2,1)]\n",
    "print(myList.sort(key=operator.itemgetter(2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
